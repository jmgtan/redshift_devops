#Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#SPDX-License-Identifier: MIT-0
Parameters:
  TestRedshiftClusterHost:
    Type:  String
    Description: The endpoint of the test Redshift cluster
  TestRedshiftClusterPort:
    Type: Number
    Default: "5439"
    Description: The port number of the test Redshift cluster
  TestRedshiftUsername:
    Type: String
    Description: The username of the test Redshift cluster
  TestRedshiftPassword:
    Type: String
    Description: The password of the test Redshift cluster
    NoEcho: true
  TestRedshiftDBName:
    Type: String
    Description: The db name that would be used for deployment and testing
  TestRedshiftIAMRole:
    Type: String
    Description: The IAM role ARN that would be used to load data into the test cluster
  TestS3Bucket:
    Type: String
    Description: The bucket name where to store the tests data
  ProdRedshiftClusterHost:
    Type:  String
    Description: The endpoint of the prod Redshift cluster
  ProdRedshiftClusterPort:
    Type: Number
    Default: "5439"
    Description: The port number of the prod Redshift cluster
  ProdRedshiftUsername:
    Type: String
    Description: The username of the prod Redshift cluster
  ProdRedshiftPassword:
    Type: String
    Description: The password of the prod Redshift cluster
    NoEcho: true
  ProdRedshiftDBName:
    Type: String
    Description: The db name that would be used for prod deployment
  CodeRepositoryName:
    Type: String
    Description: Name of the CodeCommit repository
  TestCodeBuildVpcId:
    Type: AWS::EC2::VPC::Id
    Description: The VPC ID where CodeBuild would be deployed. This should be the same VPC where the test Redshift cluster is running
  TestCodeBuildSubnetA:
    Type: AWS::EC2::Subnet::Id
    Description: The first subnet where CodeBuild would be deployed
  TestCodeBuildSubnetB:
    Type: AWS::EC2::Subnet::Id
    Description: The second subnet where CodeBuild would be deployed
  ProdCodeBuildVpcId:
    Type: AWS::EC2::VPC::Id
    Description: The VPC ID where CodeBuild would be deployed. This should be the same VPC where the test Redshift cluster is running
  ProdCodeBuildSubnetA:
    Type: AWS::EC2::Subnet::Id
    Description: The first subnet where CodeBuild would be deployed
  ProdCodeBuildSubnetB:
    Type: AWS::EC2::Subnet::Id
    Description: The second subnet where CodeBuild would be deployed
Resources:
  TestRedshiftClusterSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: devops/test-rs-cluster
      SecretString: !Sub
        - '{"username": "${username}", "password": "${password}", "host": "${host}", "port": ${port}, "dbName": "${dbName}"}'
        - {username: !Ref TestRedshiftUsername, password: !Ref TestRedshiftPassword, host: !Ref TestRedshiftClusterHost, port: !Ref TestRedshiftClusterPort, dbName: !Ref TestRedshiftDBName}
  ProdRedshiftClusterSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: devops/prod-rs-cluster
      SecretString: !Sub
        - '{"username": "${username}", "password": "${password}", "host": "${host}", "port": ${port}, "dbName": "${dbName}"}'
        - {username: !Ref ProdRedshiftUsername, password: !Ref ProdRedshiftPassword, host: !Ref ProdRedshiftClusterHost, port: !Ref ProdRedshiftClusterPort, dbName: !Ref ProdRedshiftDBName}
  CodeRepository:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: !Ref CodeRepositoryName
  CodePipelineIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: InlineServicePolicy1
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                  - codebuild:*
                  - codecommit:*
                Resource: "*"
  CodeBuildIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: InlineServicePolicy1
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - s3:*
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeDhcpOptions
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeSubnets
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeVpcs
                  - codebuild:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Ref TestRedshiftClusterSecrets
                  - !Ref ProdRedshiftClusterSecrets
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterfacePermission
                Resource: !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*'
                Condition:
                  StringEquals:
                    ec2:Subnet:
                      - !Sub
                        - "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${subnetId}"
                        - {subnetId: !Ref TestCodeBuildSubnetA}
                      - !Sub
                        - "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${subnetId}"
                        - {subnetId: !Ref TestCodeBuildSubnetB}
                      - !Sub
                        - "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${subnetId}"
                        - {subnetId: !Ref ProdCodeBuildSubnetA}
                      - !Sub
                        - "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${subnetId}"
                        - {subnetId: !Ref ProdCodeBuildSubnetB}
                    ec2:AuthorizedService: codebuild.amazonaws.com
  TestCodeBuildSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: RS Devops Test CodeBuild
      GroupDescription: Security group for RS Devops Test CodeBuild
      VpcId: !Ref TestCodeBuildVpcId
  ProdCodeBuildSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: RS Devops Prod CodeBuild
      GroupDescription: Security group for RS Devops Prod CodeBuild
      VpcId: !Ref ProdCodeBuildVpcId
  ProdCodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: RSDevopsProdDeployPhase
      ServiceRole: !GetAtt CodeBuildIAMRole.Arn
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        EnvironmentVariables:
          - Name: TEST_HOST
            Value: !Sub
              - '${arn}:host'
              - {arn: !Ref ProdRedshiftClusterSecrets}
            Type: SECRETS_MANAGER
          - Name: TEST_JDBC_USER
            Value: !Sub
              - '${arn}:username'
              - {arn: !Ref ProdRedshiftClusterSecrets}
            Type: SECRETS_MANAGER
          - Name: TEST_JDBC_PASSWORD
            Value: !Sub
              - '${arn}:password'
              - {arn: !Ref ProdRedshiftClusterSecrets}
            Type: SECRETS_MANAGER
          - Name: TEST_PORT
            Value: !Sub
              - '${arn}:port'
              - {arn: !Ref ProdRedshiftClusterSecrets}
            Type: SECRETS_MANAGER
          - Name: TEST_DB_NAME
            Value: !Sub
              - '${arn}:dbName'
              - {arn: !Ref ProdRedshiftClusterSecrets}
            Type: SECRETS_MANAGER
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec_prod.yml
      VpcConfig:
        VpcId: !Ref ProdCodeBuildVpcId
        Subnets:
          - !Ref ProdCodeBuildSubnetA
          - !Ref ProdCodeBuildSubnetB
        SecurityGroupIds:
          - !Ref ProdCodeBuildSecurityGroup
  TestCodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: RSDevopsTestPhase
      ServiceRole: !GetAtt CodeBuildIAMRole.Arn
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        EnvironmentVariables:
          - Name: TEST_HOST
            Value: !Sub
              - '${arn}:host'
              - {arn: !Ref TestRedshiftClusterSecrets}
            Type: SECRETS_MANAGER
          - Name: TEST_JDBC_USER
            Value: !Sub
              - '${arn}:username'
              - {arn: !Ref TestRedshiftClusterSecrets}
            Type: SECRETS_MANAGER
          - Name: TEST_JDBC_PASSWORD
            Value: !Sub
              - '${arn}:password'
              - {arn: !Ref TestRedshiftClusterSecrets}
            Type: SECRETS_MANAGER
          - Name: TEST_PORT
            Value: !Sub
              - '${arn}:port'
              - {arn: !Ref TestRedshiftClusterSecrets}
            Type: SECRETS_MANAGER
          - Name: TEST_DB_NAME
            Value: !Sub
              - '${arn}:dbName'
              - {arn: !Ref TestRedshiftClusterSecrets}
            Type: SECRETS_MANAGER
          - Name: TEST_REDSHIFT_IAM_ROLE
            Value: !Ref TestRedshiftIAMRole
          - Name: TEST_DATA_S3_BUCKET
            Value: !Ref TestS3Bucket
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec_test.yml
      VpcConfig:
        VpcId: !Ref TestCodeBuildVpcId
        Subnets:
          - !Ref TestCodeBuildSubnetA
          - !Ref TestCodeBuildSubnetB
        SecurityGroupIds:
          - !Ref TestCodeBuildSecurityGroup
  CodePipelineBucket:
    Type: AWS::S3::Bucket
  ReleasePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineIAMRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineBucket
      Stages:
        - Name: Source
          Actions:
            - ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: 1
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                BranchName: master
                RepositoryName: !GetAtt CodeRepository.Name
                PollForSourceChanges: false
              RunOrder: 1
              Name: SourceAction
        - Name: Testing
          Actions:
            - ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: SourceOutput
              Configuration:
                ProjectName: !Ref TestCodeBuild
              Name: TestingAction
        - Name: ProdDeploy
          Actions:
            - ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: SourceOutput
              Configuration:
                ProjectName: !Ref ProdCodeBuild
              Name: ProdDeployAction
  CodeCommitEventIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: InlineServicePolicy1
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - codepipeline:StartPipelineExecution
                Resource: "*"
  CodeCommitEvent:
    Type: AWS::Events::Rule
    Properties:
      Description: "Trigger CodePipeline whenever there's a commit to the master branch"
      State: "ENABLED"
      EventPattern:
        source:
          - "aws.codecommit"
        detail-type:
          - "CodeCommit Repository State Change"
        resources:
          - !GetAtt CodeRepository.Arn
        detail:
          event:
            - "referenceCreated"
            - "referenceUpdated"
          referenceType:
            - "branch"
          referenceName:
            - "master"
      Targets:
        - Arn: !Sub
            - "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${pipelineName}"
            - {pipelineName: !Ref ReleasePipeline}
          Id: !Sub
            - "CodeCommitEvent-Target-${pipelineName}"
            - {pipelineName: !Ref ReleasePipeline}
          RoleArn: !GetAtt CodeCommitEventIAMRole.Arn